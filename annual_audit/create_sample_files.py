import pandas as pd

def create_sample_mapping_file():
    """创建一个包含5个Sheet页的示例 mapping_file.xlsx"""
    with pd.ExcelWriter("mapping_file.xlsx", engine='openpyxl') as writer:
        # 1. 资产负债表区块
        df_bs_block = pd.DataFrame({
            "区块名称": ["流动资产", "非流动资产", "资产总计", "流动负债", "非流动负债", "负债合计", "净资产"],
            "起始行": [3, 10, 15, 18, 25, 28, 30],
            "结束行": [9, 14, 15, 24, 27, 28, 35],
            "期末数列": ["C"],
            "期初数列": ["D"],
            "跳过行关键字": ["其中：", "加："]
        })
        df_bs_block.to_excel(writer, sheet_name="资产负债表区块", index=False)

        # 2. 业务活动表逐行
        df_act_row = pd.DataFrame({
            "科目名称": ["（一）收入", "其中：主营业务收入", "其中：其他业务收入", "（二）费用", "其中：业务活动成本", "其中：管理费用", "其中：筹资费用", "其中：其他费用", "费用合计", "三、净资产变动额"],
            "行号": [3, 4, 5, 7, 8, "", "", "", "", 20], # 管理费用等行号留空，表示需要动态查找
            "非限定性收入_期末": ["C"], "非限定性收入_期初": ["D"],
            "限定性收入_期末": ["E"], "限定性收入_期初": ["F"],
            "合计数_期末": ["G"], "合计数_期初": ["H"],
        })
        df_act_row.to_excel(writer, sheet_name="业务活动表逐行", index=False)
        
        # 3. 科目等价映射
        df_alias = pd.DataFrame({
            "标准名称": ["净资产", "资产总计"],
            "别名": ["所有者权益", "资产合计"]
        })
        df_alias.to_excel(writer, sheet_name="科目等价映射", index=False)
        
        # 4. inj1 (审计事项说明-财务状况表规则)
        df_inj1 = pd.DataFrame({
            "显示名称": ["资产总额", "负债总额", "净资产总额"],
            "取值来源_项目": ["资产总计", "负债合计", "净资产"],
            "取值来源_工作表": ["资产负债表", "资产负债表", "资产负债表"],
            "取值来源_列": ["期末数", "期末数", "期末数"],
            "写入目标Sheet": ["审计事项说明", "审计事项说明", "审计事项说明"],
            "写入目标单元格": ["B3", "B4", "B5"]
        })
        df_inj1.to_excel(writer, sheet_name="inj1", index=False)

        # 5. text_mapping (报表附注规则)
        df_text = pd.DataFrame({
            "item_key": ["audit_period_text", "report_date"],
            "value_source": ["2024年", "2024年12月31日"],
            "description": ["用于填充报表附注引言的审计年度", "报表日期"]
        })
        df_text.to_excel(writer, sheet_name="text_mapping", index=False)

    print("✅ 示例 'mapping_file.xlsx' 创建成功。")

def create_sample_annual_soce_file():
    """创建一个包含动态费用行的示例 annual_soce.xlsx"""
    with pd.ExcelWriter("annual_soce.xlsx", engine='openpyxl') as writer:
        # 资产负债表
        data_bs = {
            "项目": ["", "资产", "货币资金", "应收账款", "存货", "", "", "", "非流动资产", "固定资产", "无形资产", "", "", "资产总计", "", "负债和所有者权益", "短期借款", "应付账款", "", "", "非流动负债", "长期借款", "", "", "负债合计", "", "所有者权益（或净资产）", "净资产", "其中：限定性净资产", "非限定性净资产", "净资产合计"],
            "行次": list(range(1, 31)),
            "期末数": ["", "", 1000, 500, 300, "", "", "", "", 2000, 800, "", "", 4600, "", "", 400, 600, "", "", "", 1500, "", "", 2500, "", "", 2100, 500, 1600, 2100],
            "期初数": ["", "", 800, 400, 250, "", "", "", "", 1800, 700, "", "", 3950, "", "", 300, 500, "", "", "", 1200, "", "", 2000, "", "", 1950, 450, 1500, 1950]
        }
        df_bs = pd.DataFrame(data_bs)
        df_bs.to_excel(writer, sheet_name="资产负债表", index=False)

        # 业务活动表 (包含动态费用行)
        data_act = {
            "项目": ["（一）收入", "其中：主营业务收入", "其中：其他业务收入", "", "（二）费用", "其中：业务活动成本", "   其中：劳务成本", "   其中：原料成本", "其中：管理费用", "   其中：工资薪酬", "   其中：办公室租金", "其中：筹资费用", "其中：其他费用", "", "费用合计", "", "三、净资产变动额"],
            "行次": list(range(1, 18)),
            "非限定性收入_期末": [5000, 4800, 200, "", -4000, -1500, -1000, -500, -2000, -1500, -500, -100, -400, "", -4000, "", 1000],
            "非限定性收入_期初": [4500, 4300, 200, "", -3500, -1400, -900, -500, -1600, -1200, -400, -100, -400, "", -3500, "", 1000],
            "限定性收入_期末": [0]*17, "限定性收入_期初": [0]*17,
            "合计数_期末": [5000, 4800, 200, "", -4000, -1500, -1000, -500, -2000, -1500, -500, -100, -400, "", -4000, "", 1000],
            "合计数_期初": [4500, 4300, 200, "", -3500, -1400, -900, -500, -1600, -1200, -400, -100, -400, "", -3500, "", 1000]
        }
        df_act = pd.DataFrame(data_act)
        df_act.to_excel(writer, sheet_name="业务活动表", index=False)
    
    print("✅ 示例 'annual_soce.xlsx' 创建成功。")

if __name__ == '__main__':
    create_sample_mapping_file()
    create_sample_annual_soce_file()